class SortingAlgorithm {

    //selection sort
    fun selectionSort(
        arr: Array<Int>
        ): Array<Int> {

        for (i in arr.indices)
            for (j in i + 1 until arr.size)
                if (arr[i] > arr[j]) {

                    val temp = arr[i]
                    arr[i] = arr[j]
                    arr[j] = temp
                }
        return arr
    }

    //bubble sort
    fun bubbleSort(
        arr: Array<Int>
        ): Array<Int> {

        for (i in arr.indices)
            for (j in arr.indices)
                if (j != arr.size - 1) {
                    if (arr[j] > arr[j + 1]) {

                        val temp = arr[j]
                        arr[j] = arr[j + 1]
                        arr[j + 1] = temp
                    }
                }

        return arr
    }

    //recursive bubble sort
    fun recursiveBubbleSort(
        arr: Array<Int>,
        n: Int
        ): Array<Int> {

        if (n == 1)
            return arr

        for (i in 0 until n)
            for (j in 0 until n)
                if (j != n - 1) {
                    if (arr[j] > arr[j + 1]) {

                        val temp = arr[j]
                        arr[j] = arr[j + 1]
                        arr[j + 1] = temp
                    }
                }
        return recursiveBubbleSort(arr, n - 1)
    }

    //insertion sort
    fun insertionSort(
        arr: Array<Int>
        ) :Array<Int>{
        val n = arr.size
        for (i in 1 until n) {
            val key = arr[i]
            var j = i - 1

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j]
                j--
            }
            arr[j + 1] = key
        }
        return arr
    }

    //merge sort
    fun merge(
        arr: Array<Int>,
        l: Int,
        m: Int,
        r: Int
        ) {

        val n1 = m - l + 1
        val n2 = r - m

        val L = IntArray(n1)
        val R = IntArray(n2)

        for (i in 0 until n1) L[i] = arr[l + i]
        for (j in 0 until n2) R[j] = arr[m + 1 + j]

        var i = 0
        var j = 0

        var k = l
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i]
                i++
            } else {
                arr[k] = R[j]
                j++
            }
            k++
        }

        while (i < n1) {
            arr[k] = L[i]
            i++
            k++
        }

        while (j < n2) {
            arr[k] = R[j]
            j++
            k++
        }
    }

    fun mergeSort(
        arr: Array<Int>,
        l: Int,
        r: Int
        ) :Array<Int>{
        if (l < r) {

            val m = (l + r) / 2

            mergeSort(arr, l, m)
            mergeSort(arr, m + 1, r)

            merge(arr, l, m, r)
        }
        return arr
    }

    //quick sort
    fun partition(
        arr: Array<Int>,
        low: Int,
        high: Int
        ): Int {
        val pivot = arr[high]
        var i = low - 1
        for (j in low until high) {

            if (arr[j] < pivot) {
                i++

                val temp = arr[i]
                arr[i] = arr[j]
                arr[j] = temp
            }
        }

        val temp = arr[i + 1]
        arr[i + 1] = arr[high]
        arr[high] = temp
        return i + 1
    }

    fun quickSort(
        arr: Array<Int>,
        low: Int,
        high: Int
        ) :Array<Int>{
        if (low < high) {
            val pi = partition(arr, low, high)

            quickSort(arr, low, pi - 1)
            quickSort(arr, pi + 1, high)
        }
        return arr
    }

    //heap sort
    fun heapSort(
        arr: Array<Int>
        ) :Array<Int>{
        val n = arr.size

        for (i in n / 2 - 1 downTo 0) heapify(arr, n, i)

        for (i in n - 1 downTo 1) {

            val temp = arr[0]
            arr[0] = arr[i]
            arr[i] = temp

            heapify(arr, i, 0)
        }
        return arr
    }

    fun heapify(
        arr: Array<Int>,
        n: Int,
        i: Int
        ) {
        var largest = i
        val l = 2 * i + 1
        val r = 2 * i + 2

        if (l < n && arr[l] > arr[largest]) largest = l

        if (r < n && arr[r] > arr[largest]) largest = r

        if (largest != i) {
            val swap = arr[i]
            arr[i] = arr[largest]
            arr[largest] = swap

            heapify(arr, n, largest)
        }
    }

    //radix sort
    fun getMax(
        arr: Array<Int>,
        n: Int
        ): Int {
        var mx = arr[0]
        for (i in 1 until n)
            if (arr[i] > mx) mx = arr[i]
        return mx
    }


    fun countSort(
        arr: Array<Int>,
        n: Int,
        exp: Int
        ) {
        val output = IntArray(n)
        val count = IntArray(10)
        Arrays.fill(count, 0)

        var i = 0
        while (i < n) {
            count[arr[i] / exp % 10]++
            i++
        }

        i = 1
        while (i < 10) {
            count[i] += count[i - 1]
            i++
        }

        i = n - 1
        while (i >= 0) {
            output[
                count[arr[i] / exp % 10] - 1
                ] = arr[i]
            count[arr[i] / exp % 10]--
            i--
        }

        i = 0
        while (i < n) {
            arr[i] = output[i]
            i++
        }
    }

    fun radixSort(
        arr: Array<Int>,
        n: Int
        ) : Array<Int>{

        val m = getMax(arr, n)

        var exp = 1
        while (m / exp > 0) {
            countSort(arr, n, exp)
            exp *= 10
        }
        return arr
    }

}