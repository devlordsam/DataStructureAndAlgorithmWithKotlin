
//factorial
fun fact(N: Int): Long {
    return if (N <= 1)
        N.toLong()
    else
        N * fact(N - 1)
}

//fibonacci
fun fib(N: Int): MutableList<Int> {

    val list = mutableListOf(0)
    var a: Int = 1
    var b: Int = 0
    var c: Int = 0
    for (i in 0..N) {
        if (i == 0) {
            list.add(0)
        }
        c = a + b
        list.add(c)
        b = a
        a = c


    }
    return list
}

//missing one
fun GetValue(arr: Array<Int>): Int {
    val N = arr.size
    val totat = (N + 1) * (N + 2) / 2
    val sum = arr.sum()
    return totat - sum
}

//occurance
fun OccurrencesWithIndex(arr: Array<Int>) {
    for (i in arr.indices) {
        for (j in i + 1 until arr.size) {
            if (arr[i] == arr[j]) {
                println(arr[i])
                break
            }
            break
        }
    }
}

//palindrome
fun pali(N: String): Boolean {
    val temp = N.slice(N.length - 1 downTo 0)
    return N == temp
}

//pattern
fun Matrix() {
    for (i in 1..5) {
        for (j in 1..5) {
            print("*")
        }
        println()
    }
}

fun triangle() {
    val row: Int = 5
    for (i in 1..row) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
}

fun reverse() {
    val row = 5
    for (i in row.downTo(1)) {
        for (j in 1..i) {
            print("*")
        }
        println()
    }
}

//table
fun Table(N: Int) {
    for (i in 1..10) {
        println("$N * $i = ${N * i}")
    }
}